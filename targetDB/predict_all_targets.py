#!/usr/bin/env python
"""Run tractability predictions for all targets in the database.

This script loads the SQLite database used by TargetDB, computes the
descriptors for every target, applies the druggability machine-learning
model and writes the resulting scores to a CSV file. Only fields derived
from the model and the high-level scores are written; all other data in
the report generated by ``druggability_report.py`` are retrieved
directly from the database.
"""

import argparse
import os
import sqlite3
from concurrent.futures import ProcessPoolExecutor
import warnings

# Suppress pandas warnings
warnings.filterwarnings('ignore', category=FutureWarning)
os.environ['PYTHONWARNINGS'] = 'ignore::FutureWarning'

import numpy as np
import pandas as pd
from tqdm import tqdm

import target_descriptors as td
from utils import druggability_ml as dml


_MODEL = None
_DB_PATH = None


def _init_worker(db_path: str):
    """Initialise global model and database path for worker processes."""
    global _MODEL, _DB_PATH
    _MODEL = dml.generate_model()
    _DB_PATH = db_path


def _predict_one(target_id: str) -> pd.DataFrame:
    """Calculate scores for a single target identifier."""
    data = td.get_descriptors_list(target_id, targetdb=_DB_PATH)
    tscore = td.target_scores(data, mode='programmatic')
    proba = pd.DataFrame(dml.predict_prob(_MODEL, tscore.score_components),
                         columns=_MODEL.classes_)
    tscore.scores['Tractability_probability'] = (proba[1] * 100).round(2)
    tscore.scores['Tractable'] = np.where(
        tscore.scores['Tractability_probability'] >= 60,
        'Tractable',
        np.where(tscore.scores['Tractability_probability'] >= 40,
                 'Challenging', 'Intractable')
    )
    tscore.scores['In_training_set'] = dml.in_training_set(tscore.score_components)
    return tscore.scores


def run_predictions(db_path: str, workers: int = None) -> pd.DataFrame:
    """Compute tractability predictions for all targets.

    Parameters
    ----------
    db_path: str
        Path to the TargetDB SQLite database.

    Returns
    -------
    pandas.DataFrame
        DataFrame with target identifiers, gene names and the calculated
        scores including the tractability probability.
    """
    # Recover the list of all target identifiers from the database
    conn = sqlite3.connect(db_path)
    try:
        ids = pd.read_sql("SELECT Target_id,Gene_name FROM Targets", conn)
    finally:
        conn.close()

    workers = workers or os.cpu_count() or 1
    with ProcessPoolExecutor(max_workers=workers,
                             initializer=_init_worker,
                             initargs=(db_path,)) as pool:
        results = list(tqdm(pool.map(_predict_one, ids['Target_id'].astype(str)),
                            total=len(ids),
                            desc='Scoring targets'))

    scores = pd.concat(results, ignore_index=True)
    result = ids.merge(scores, on='Target_id', how='left')
    return result


def main() -> None:
    parser = argparse.ArgumentParser(
        description='Run tractability predictions for all proteins in the database.'
    )
    parser.add_argument('database', help='Path to TargetDB SQLite database')
    parser.add_argument('output', help='Path to output CSV file')
    parser.add_argument('-w', '--workers', type=int,
                        help='Number of worker processes (default: CPU count)')
    args = parser.parse_args()

    predictions = run_predictions(args.database, workers=args.workers)
    predictions.to_csv(args.output, index=False)


if __name__ == '__main__':
    main()
