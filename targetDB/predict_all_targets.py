#!/usr/bin/env python
"""Run tractability predictions for all targets in the database.

This script loads the SQLite database used by TargetDB, computes the
descriptors for every target, applies the druggability machine-learning
model and writes the resulting scores to a CSV file. Only fields derived
from the model and the high-level scores are written; all other data in
the report generated by ``druggability_report.py`` are retrieved
directly from the database.
"""

import argparse
import sqlite3

import numpy as np
import pandas as pd

import target_descriptors as td
from utils import druggability_ml as dml


def run_predictions(db_path: str) -> pd.DataFrame:
    """Compute tractability predictions for all targets.

    Parameters
    ----------
    db_path: str
        Path to the TargetDB SQLite database.

    Returns
    -------
    pandas.DataFrame
        DataFrame with target identifiers, gene names and the calculated
        scores including the tractability probability.
    """
    # Recover the list of all target identifiers from the database
    conn = sqlite3.connect(db_path)
    try:
        ids = pd.read_sql("SELECT Target_id,Gene_name FROM Targets", conn)
    finally:
        conn.close()

    # Retrieve descriptors for all targets. ``get_descriptors_list``
    # expects a comma-separated string of quoted identifiers.
    id_str = "','".join(ids["Target_id"].astype(str))
    data = td.get_descriptors_list(id_str, targetdb=db_path)

    # Generate scores and apply the machine-learning model
    # Use a non-interactive mode to avoid GUI prompts when calculating
    # the multi-parameter optimization (MPO) score.
    tscore = td.target_scores(data, mode='programmatic')
    model = dml.generate_model()
    proba = pd.DataFrame(dml.predict_prob(model, tscore.score_components),
                         columns=model.classes_)
    tscore.scores['Tractability_probability'] = (proba[1] * 100).round(2)
    tscore.scores['Tractable'] = np.where(
        tscore.scores['Tractability_probability'] >= 60,
        'Tractable',
        np.where(tscore.scores['Tractability_probability'] >= 40,
                 'Challenging', 'Intractable')
    )
    tscore.scores['In_training_set'] = dml.in_training_set(tscore.score_components)

    # Merge gene names for readability
    result = ids.merge(tscore.scores, on='Target_id', how='left')
    return result


def main() -> None:
    parser = argparse.ArgumentParser(
        description='Run tractability predictions for all proteins in the database.'
    )
    parser.add_argument('database', help='Path to TargetDB SQLite database')
    parser.add_argument('output', help='Path to output CSV file')
    args = parser.parse_args()

    predictions = run_predictions(args.database)
    predictions.to_csv(args.output, index=False)


if __name__ == '__main__':
    main()
